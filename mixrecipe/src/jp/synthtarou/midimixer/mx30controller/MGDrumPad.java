/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx30controller;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicButtonUI;
import jp.synthtarou.midimixer.libs.UniqueChecker;
import jp.synthtarou.midimixer.libs.common.MXUtil;
import jp.synthtarou.midimixer.libs.midi.MXMessage;
import jp.synthtarou.midimixer.libs.midi.MXMessageFactory;
import jp.synthtarou.midimixer.libs.midi.MXMidi;
import jp.synthtarou.midimixer.libs.swing.MXModalFrame;
import jp.synthtarou.midimixer.libs.swing.focus.MXFocusAble;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MGDrumPad extends javax.swing.JPanel implements MXFocusAble {

    final MX32MixerProcess _process;
    int _row, _column;
    boolean _dispFlag;

    class MyButtonUI extends BasicButtonUI {

        Color highlight = MXUtil.mixedColor(Color.white, Color.blue, 50);
        Color normal = new JButton().getBackground();

        public MyButtonUI() {
        }

        public void paint(Graphics g, JComponent c) {
            MGStatus status = getStatus();
            boolean sel = _dispFlag;
            JButton btn = (JButton)c;

            if (sel) {
                btn.setBackground(highlight);
            }
            else {
                btn.setBackground(normal);
            }
            super.paint(g, c);
        }
    }

    public MGStatus getStatus() {
        return _process._data.getDrumPadStatus(_row, _column);
    }

    public void setStatus(MGStatus status) {
        _process._data.setDrumPadStatus(_row, _column, status);
    }

    public MGDrumPad(MX32MixerProcess process, int row, int column) {
        _process = process;
        _row = row;
        _column = column;
        initComponents();
        jButton1.setMargin(new Insets(0, 0, 0, 0));
        for (MouseListener l : jButton1.getMouseListeners()) {
            jButton1.removeMouseListener(l);
        }
        jButton1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    return;
                }
                MGStatus status = getStatus();
                status._switchIncomming = true;
                _process.controlByUI(status, status.getValue()._max);
            }

            public void mouseReleased(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    return;
                }
                MGStatus status = getStatus();
                status._switchIncomming = false;
                _process.controlByUI(status, status.getValue()._min);
            }
        });

        updateUI();
        if (jButton1 != null) {
            jButton1.setUI(new MyButtonUI());
        }
    }

    public void updateUIOnly(boolean newValue) {
        _dispFlag = newValue;
        jButton1.repaint();
    }

    public void updateUI() {
        super.updateUI();
        if (jButton1 != null) {
            MGStatus status = getStatus();
            jButton1.setUI(new MyButtonUI());
            if (_process != null && _process != null) {
                if (status.getName() == null || status.getName().length() == 0) {
                    MXMessage message = status.toMXMessage(null);
                    if (message == null) {
                        jButton1.setText("?");
                    } else {
                        jButton1.setText(message.toShortString());
                    }
                } else {
                    jButton1.setText(status.getName());
                }
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jButton1.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void focusStatusChanged(boolean flag) {
        if (flag) {
            if (_process != null) {
                MGStatus status = getStatus();
                _process._parent.showTextForFocus(MGStatus.TYPE_DRUMPAD, _process._port, _row, _column);
            }
        }
    }

    public void setValueChangeable(boolean using) {
        jButton1.setEnabled(using);
    }

    @Override
    public void focusedMousePressed(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e) || _process._parent._editingControl) {
            _process._parent.enterEditMode(false);
            focusStatusChanged(false);
            editContoller();
        }
    }

    @Override
    public void focusChangingValue() {
        _process._parent.showTextForFocus(MGStatus.TYPE_DRUMPAD, _process._port, _row, _column);
    }

    public void increment(UniqueChecker already) {
        _process.controlByUI(getStatus(), getStatus().getValue()._max);
    }

    public void decriment(UniqueChecker already) {
        _process.controlByUI(getStatus(), getStatus().getValue()._min);
    }

    public void editContoller() {
        _process._parent.enterEditMode(false);
        MGStatus status = (MGStatus) getStatus().clone();
        MGStatusConfig config = new MGStatusConfig(_process, status);
        MXModalFrame.showAsDialog(this, config, "Enter Edit Pad {row:" + _row + ", column:" + _column + "}");
        _process.notifyCacheBroken();

        if (config._okOption) {
            setStatus(config._status);
            _process.notifyCacheBroken();
            updateUI();
        }
    }

    public void invokeDrumAction() {
        MGStatus status = getStatus();
        
        if (status._switchNeedAction == false) {
            return;
        }
        status._switchNeedAction = false;

        boolean newSwitch = status._switchToSent;

        if (newSwitch) {
            if (status.getSwitchType() == MGStatus.SWITCH_TYPE_SEQUENCE) {
                status.startSequence(_process);
            } else if (status.getSwitchType() == MGStatus.SWITCH_TYPE_HARMONY) {
                int velocity = status.getSwitchLastDetected();

                String notes = status.getSwitchHarmonyNotes();
                int veltype = status.getSwitchHarmonyVelocityType();
                int port = getStatus().getPort();

                if (veltype == MGStatus.SWITCH_HARMONY_VELOCITY_SAME_AS_INPUT) {
                    if (velocity == 0) {
                        velocity = status.getSwitchHarmonyVelocityFixed();
                    }
                } else if (veltype == MGStatus.SWITCH_HARMONY_VELOCITY_FIXED) {
                    velocity = status.getSwitchHarmonyVelocityFixed();
                } else {
                    throw new IllegalStateException("velocity unknown");
                }
                int[] noteList = MXMidi.textToNoteList(notes);
                for (int note : noteList) {
                    MXMessage message = MXMessageFactory.fromShortMessage(port, MXMidi.COMMAND_NOTEON + status.getSwitchOutChannel(), note, velocity);
                    message._timing = null; //timing;
                    _process.reenterMXMessageByUI(message);
                }
            }
            else {//ON , ON-OFF
                MXMessage message = status.toMXMessageCaseDrumOn(null);
                if (message != null) {
                    _process.reenterMXMessageByUI(message);
                }
            }
        } else {
            if (status.getSwitchType() == MGStatus.SWITCH_TYPE_ON) {
            }
            else if (status.getSwitchType() == MGStatus.SWITCH_TYPE_SEQUENCE) {
                status.stopSequence();
            }
            else if (status.getSwitchType() == MGStatus.SWITCH_TYPE_HARMONY) {
                String notes = status.getSwitchHarmonyNotes();
                int[] noteList = MXMidi.textToNoteList(notes);
                int port = status.getPort();
                for (int note : noteList) {
                    MXMessage message = MXMessageFactory.fromShortMessage(port, MXMidi.COMMAND_NOTEOFF + status.getSwitchOutChannel(), note, 0);
                    //TODO message._timing = _timing;
                    _process.reenterMXMessageByUI(message);
                }
            }
            else { // ON-OFF
                MXMessage message = status.toMXMessageCaseDrumOn(null);
                if (message != null) {
                    _process.reenterMXMessageByUI(message);
                }
            }
        }
    }

    public void pickupTriggerStatus() {
        MGStatus status = getStatus();
        int velocity = status.getSwitchLastDetected();

        boolean newSwitch = status._switchIncomming;
        boolean oldSwitch = status._switchLastDetect;

        int value = status.getValue()._var;
        MXMessage checkTemp = status.toMXMessage(null);

        if (checkTemp.isCommand(MXMidi.COMMAND_PROGRAMCHANGE)) {
            value = 0;
        }

        status.setSwitchLastDetected(velocity);

        boolean flag = (oldSwitch != newSwitch);

        if (!flag && checkTemp.hasValueLowField() == false) {
            flag = true;
        }

        if (!flag && status.getSwitchInputType() == MGStatus.SWITCH_ON_WHEN_MATCH) {
            flag = true;
        }

        if (flag) { // ワンショットまたは、画面上の数値が切り替わった (nowへ)
            status._switchLastDetect = newSwitch;
            if (newSwitch) { // オンにきりかわった
                if (status.isSwitchWithToggle()) {
                    boolean lastSent = status.isValueLastSent();
                    newSwitch = !lastSent;
                }
            } else { // オフにきりかわたｔ
                if (status.isSwitchWithToggle()) {
                    //　トグルなら終了
                    return;
                }
            }
            status._switchToSent = newSwitch;
            updateUIOnly(newSwitch);
            status._switchNeedAction = true;
        }
    }
}
