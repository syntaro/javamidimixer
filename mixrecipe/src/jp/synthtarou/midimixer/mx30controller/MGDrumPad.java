/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx30controller;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import javax.swing.plaf.basic.BasicButtonUI;
import jp.synthtarou.midimixer.libs.common.MXLog;
import jp.synthtarou.midimixer.libs.common.MXUtil;
import jp.synthtarou.midimixer.libs.midi.MXMessage;
import jp.synthtarou.midimixer.libs.midi.MXTiming;
import jp.synthtarou.midimixer.libs.swing.MXModalFrame;
import jp.synthtarou.midimixer.libs.swing.focus.MXFocusAble;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MGDrumPad extends javax.swing.JPanel implements MXFocusAble {

    final MX32MixerProcess _process;
    int _row, _column;

    Color highlight = MXUtil.mixedColor(Color.white, Color.blue, 50);
    Color normal = new JButton().getBackground();

    class MyButtonUI extends BasicButtonUI {

        boolean colorfull = false;

        public MyButtonUI() {
        }

        public void paint(Graphics g, JComponent c) {
            JButton btn = (JButton)c;

            if (colorfull) {
                btn.setBackground(highlight);
            }
            else {
                btn.setBackground(normal);
            }
            super.paint(g, c);
        }
    }

    public MGStatus getStatus() {
        return _process._data.getDrumPadStatus(_row, _column);
    }

    public void setStatus(MGStatus status) {
        _process._data.setDrumPadStatus(_row, _column, status);
    }

    public MGDrumPad(MX32MixerProcess process, int row, int column) {
        _process = process;
        _row = row;
        _column = column;
        initComponents();
        jButton1.setMargin(new Insets(0, 0, 0, 0));
        for (MouseListener l : jButton1.getMouseListeners()) {
            jButton1.removeMouseListener(l);
        }
        jButton1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    return;
                }
                getStatus()._drum.mouseDetected(new MXTiming(), true);
            }

            public void mouseReleased(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    return;
                }
                getStatus()._drum.mouseDetected(new MXTiming(), false);
            }
        });

        updateUI();
    }

    public void updateButtonUI(boolean newValue) {
        MyButtonUI ui = (MyButtonUI)jButton1.getUI();
        ui.colorfull = newValue;
        jButton1.repaint();
    }

    public void updateUI() {
        super.updateUI();
        if (jButton1 != null) {
            MGStatus status = getStatus();
            jButton1.setUI(new MyButtonUI());
            if (status._name == null || status._name.length() == 0) {
                MXMessage message = status._base;
                jButton1.setText(message.toStringForUI());
            } else {
                jButton1.setText(status._name);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButton1 = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jButton1.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jButton1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void focusStatusChanged(boolean flag) {
        if (flag) {
            if (_process != null) {
                MGStatus status = getStatus();
                _process._parent.showTextForFocus(MGStatus.TYPE_DRUMPAD, _process._port, _row, _column);
            }
        }
    }

    public void setValueChangeable(boolean using) {
        jButton1.setEnabled(using);
    }

    @Override
    public void focusedMousePressed(MouseEvent e) {
        if (SwingUtilities.isRightMouseButton(e) || _process._parent._editingControl) {
            _process._parent.enterEditMode(false);
            focusStatusChanged(false);
            editContoller();
        }
    }

    @Override
    public void focusChangingValue() {
        _process._parent.showTextForFocus(MGStatus.TYPE_DRUMPAD, _process._port, _row, _column);
    }

    public void increment(MXTiming timing) {
        getStatus()._drum.mouseDetected(timing, true);
    }

    public void decriment(MXTiming timing) {
        getStatus()._drum.mouseDetected(timing, false);
    }

    public void editContoller() {
        _process._parent.enterEditMode(false);
        MGStatus status = (MGStatus) getStatus().clone();
        MGStatusPanel panel = new MGStatusPanel(_process, status);
        MXModalFrame.showAsDialog(this, panel, "Enter Edit Pad {row:" + _row + ", column:" + _column + "}");
        _process.notifyCacheBroken();

        if (panel._okOption) {
            setStatus(panel._status);
            _process.notifyCacheBroken();
            updateUI();
        }
    }
}
