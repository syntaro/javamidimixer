/*
 * Copyright (C) 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.libs.accordion;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import javax.swing.JComponent;
import javax.swing.SwingUtilities;
import jp.synthtarou.midimixer.libs.swing.attachment.MXAttachSliderLikeEclipse;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MXAccordion extends javax.swing.JPanel {
    /**
     * Creates new form MXAccordionPanel
     */
    public MXAccordion() {
        this(new MXAccordionFocus(), "Accordion");
    }
    
    public MXAccordion(MXAccordionFocus focus, String name) {
        initComponents();
        
        jLabel1.setText(name);
        
        int height = jSlider1.getHeight();
        jSlider1.setMinimumSize(new Dimension(50, 20));
        jSlider1.setMaximumSize(new Dimension(50, 20));
        jSlider1.setPreferredSize(new Dimension(50, 20));
        new MXAttachSliderLikeEclipse(jSlider1).showAsSwitch(true);
        jSlider1.setMinimum(0);
        jSlider1.setMaximum(1);

        //overwrite
        _contentsList = new MXAccordionInnerPanel();
        jScrollPane1.setViewportView(_contentsList.getAnimationPanel());
        setColorFull(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelContents = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();

        setLayout(new java.awt.GridBagLayout());

        jPanelContents.setLayout(new javax.swing.BoxLayout(jPanelContents, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane1.setViewportView(jPanelContents);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("メイリオ", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("Title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        add(jLabel1, gridBagConstraints);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jSlider1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        Integer v = jSlider1.getValue();
        boolean sel = v.intValue() != 0;
        if (_accordionOpened != sel) {
            openAccordion(sel);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelContents;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    MXAccordionInnerPanel _contentsList;
    boolean _accordionOpened = true;
    boolean _colorfull = true;
    
    public void setColorFull(boolean selected) {
        _colorfull = selected;
        JComponent panel = _contentsList.getAnimationPanel();
        setColorfullSub(panel, selected);
    }
    
    void setColorfullSub(JComponent panel, boolean selected) {
        panel.setEnabled(selected);
        if (panel instanceof Container) {
            Component[] list = ((Container)panel).getComponents();
            for (Component child : list) {
                if (child instanceof JComponent) {
                    setColorfullSub((JComponent)child, selected);
                }
            }
        }
    }
    
    public void openAccordion(boolean opened) {
        if (SwingUtilities.isEventDispatchThread() == false) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    openAccordion(opened);
                }
            });
            return;
        }

        if (_accordionOpened == opened) {
            return;
        }

        _accordionOpened = opened;

        Integer v = jSlider1.getValue();
        boolean sel = v.intValue() != 0;
        if (sel != opened) {
            jSlider1.setValue(opened ? 1 : 0);
        }
        _contentsList.openWithAnimation(opened);
    }

    public boolean isAccordionOpened() {
        return _accordionOpened;
    }
    
    public void insertElement(int pos, MXAccordionElement element) {
        _contentsList.add(element, pos);
    }
    
    public void refresh(int pos) {
        if (pos >= 0) {
            _contentsList._listElement.get(pos).refill();
        }
        _contentsList.revalidateASAP();
    }
    
    public int elementCount() {
        return _contentsList.count();
    }
    
    public MXAccordionElement elementAt(int x) {
        return _contentsList.get(x);
    }
    
    public void removeElement(MXAccordionElement elem) {
        _contentsList.remove(elem);
    }
}
