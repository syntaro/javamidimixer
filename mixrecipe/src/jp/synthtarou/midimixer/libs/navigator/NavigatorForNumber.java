/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.libs.navigator;

import java.awt.Dimension;
import javax.swing.JPanel;
import javax.swing.SpinnerNumberModel;
import jp.synthtarou.midimixer.libs.common.MXUtil;
import jp.synthtarou.midimixer.libs.common.MXRangedValue;
import jp.synthtarou.midimixer.libs.swing.attachment.MXAttachSliderLikeEclipse;
import jp.synthtarou.midimixer.libs.swing.attachment.MXAttachSliderSingleClick;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class NavigatorForNumber extends javax.swing.JPanel implements INavigator<MXRangedValue> {
    /*
     * Creates new form NavigatorForText
     */
    public NavigatorForNumber(MXRangedValue value) {
        initComponents();
        _returnValue = null;
        jSlider1.setValue(value._var);
        jSlider1.setMinimum(value._min);
        jSlider1.setMaximum(value._max);
        jSpinner1.setModel(new SpinnerNumberModel(value._var, value._min, value._max, 1));
        setPreferredSize(new Dimension(600, 200));
        new MXAttachSliderSingleClick(jSlider1);
        new MXAttachSliderLikeEclipse(jSlider1);
        _returnValue = value;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButtonCancel = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        jSlider1 = new javax.swing.JSlider();

        setLayout(new java.awt.GridBagLayout());

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jButtonCancel, gridBagConstraints);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButtonOK, gridBagConstraints);

        jSpinner1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinner1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHEAST;
        gridBagConstraints.weighty = 1.0;
        add(jSpinner1, gridBagConstraints);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jSlider1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        _returnStatus = INavigator.RETURN_STATUS_APPROVED;
        MXUtil.getOwnerWindow(this).setVisible(false);
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        _returnStatus = INavigator.RETURN_STATUS_CANCELED;
        _returnValue = null;
        MXUtil.getOwnerWindow(this).setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        updateValueByUI(jSlider1.getValue());
    }//GEN-LAST:event_jSlider1StateChanged

    private void jSpinner1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinner1StateChanged
        updateValueByUI((Integer)jSpinner1.getValue());
    }//GEN-LAST:event_jSpinner1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JSlider jSlider1;
    private javax.swing.JSpinner jSpinner1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getNavigatorPanel() {
        return this;
    }

    @Override
    public int getNavigatorType() {
        return INavigator.TYPE_EDITOR;
    }

    @Override
    public boolean isNavigatorRemovable() {
        return false;
    }
    
    @Override
    public boolean validateWithNavigator(MXRangedValue result) {
        return true;
    }

    @Override
    public int getReturnStatus() {
        return _returnStatus;
    }

    @Override
    public MXRangedValue getReturnValue() {
        return _returnValue;
    }
    
    int _returnStatus = INavigator.RETURN_STATUS_NOTSET;
    MXRangedValue _returnValue = null;
    
    public void updateValueByUI(int value) {
        MXRangedValue back = _returnValue;

        _returnValue = null;
        Integer i = (Integer)jSpinner1.getValue();
        if (i != value) {
            jSpinner1.setValue(value);
        }
        int j = jSlider1.getValue();
        if (j != value) {
            jSlider1.setValue(value);
        }
        
        if (back != null) {
            back = back.changeValue(value);
        }

        _returnValue = back;
    }
}
