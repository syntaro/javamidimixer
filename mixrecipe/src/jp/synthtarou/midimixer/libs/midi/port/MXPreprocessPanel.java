/*
 * Copyright (C) 2024 Syntarou YOSHIDA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.libs.midi.port;

import java.awt.Dimension;
import java.util.ArrayList;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MXPreprocessPanel extends javax.swing.JPanel {

    static final MXPreprocessPanel _instance = new MXPreprocessPanel();

    public static MXPreprocessPanel getInstance() {
        return _instance;
    }

    /**
     * Creates new form MXPreprocessManager
     */
    public MXPreprocessPanel() {
        initComponents();
        _tableModel = new PreProcessTableModel();
        jTable1.setModel(_tableModel);
        
        jTable1.getColumnModel().getColumn(0).setMinWidth(30);
        for (int i = 1; i <= 3; ++ i) {
            jTable1.getColumnModel().getColumn(i).setMaxWidth(45);
        }
        jTable1.getColumnModel().getColumn(4).setMinWidth(45);
     }

    public void recalcDone(RecordEntry e) {
        _tableModel.recalc(e);
    }

    PreProcessTableModel _tableModel;

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();
        jButtonLockIt = new javax.swing.JButton();
        jButtonUnlockIt = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setBorder(javax.swing.BorderFactory.createTitledBorder("14 bit detector (UnderConstruction)"));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("ControlChange 0~15, 16~31");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabel1, gridBagConstraints);

        jButtonLockIt.setText("mark as 14bit");
        jButtonLockIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLockItActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButtonLockIt, gridBagConstraints);

        jButtonUnlockIt.setText("unmark");
        jButtonUnlockIt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUnlockItActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        add(jButtonUnlockIt, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonLockItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLockItActionPerformed
        int row = jTable1.getSelectedRow();
        RecordEntry e = _tableModel.getRecordEntry(row);
        e._choiceBit = 14;
        e.recalc();
    }//GEN-LAST:event_jButtonLockItActionPerformed

    private void jButtonUnlockItActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUnlockItActionPerformed
        int row = jTable1.getSelectedRow();
        RecordEntry e = _tableModel.getRecordEntry(row);
        e._choiceBit = 0;
        e.recalc();
    }//GEN-LAST:event_jButtonUnlockItActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonLockIt;
    private javax.swing.JButton jButtonUnlockIt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables

    public void resetCounter() {
        ArrayList<RecordEntry> list = new ArrayList(_tableModel._rows);
        for (RecordEntry e : list) {
            if (e._choiceBit == 0) {
                _tableModel._rows.remove(e);
                continue;
            }
            e._count0h = 0;
            e._count20h = 0;
            e._countPair = 0;
        }
        _tableModel.fireTableDataChanged();
    }
}
