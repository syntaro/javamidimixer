/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.ccxml.ui;

import java.awt.Dimension;
import jp.synthtarou.midimixer.libs.swing.attachment.MXAttachComboRendererShrinkable;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import jp.synthtarou.midimixer.ccxml.InformationForModule;
import jp.synthtarou.midimixer.ccxml.xml.CXFile;
import jp.synthtarou.midimixer.ccxml.xml.CXNode;
import jp.synthtarou.midimixer.ccxml.xml.CXTreeModel;
import jp.synthtarou.midimixer.libs.common.MXUtil;
import jp.synthtarou.midimixer.libs.navigator.legacy.NavigatorForText;
import jp.synthtarou.midimixer.libs.navigator.legacy.NavigatorForNodeAttribute;
import jp.synthtarou.midimixer.libs.wraplist.MXWrap;
import jp.synthtarou.midimixer.libs.wraplist.MXWrapList;
import jp.synthtarou.midimixer.libs.navigator.legacy.INavigator;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class EditorForXMLTag extends javax.swing.JPanel {

    CXNode _selection;
    CXNode _treeRoot;
    CXFile _file;

    /**
     * Creates new form EditorForXMLTag
     * @param file
     */
    public EditorForXMLTag(CXFile file) {
        initComponents();
        _file = file;
        setTargetFile(file);
        setPreferredSize(new Dimension(600, 500));
    }

    CXTreeModel _treeModel;

    /**
     *
     * @param file
     */
    public void setTargetFile(CXFile file) {
        //jTextFieldTagPath.setText(node.getAsPathString(null));
        _file = file;
        MXWrapList<InformationForModule> model = new MXWrapList();

        new MXAttachComboRendererShrinkable(jComboBox1);
        for (InformationForModule module : file.listModules()) {
            String name = module._node._listAttributes.valueOfName("Name");
            model.addNameAndValue(name, module);
        }

        jComboBox1.setModel(model);
        fillTreeSub(file.listModules().get(0));
    }

    void fillInputFields(CXNode node) {
        _selection = node;
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        model.addColumn("Name");
        model.addColumn("Value");
        for (MXWrap<String> attr : _selection._listAttributes) {
            model.addRow(new Object[]{attr._name, attr._value});
        }
        jTable1.setModel(model);
        jTextAreaTextContent.setText(_selection.getTextContent());
    }
    
    void fillTreeSub(InformationForModule module) {
        _treeModel = new CXTreeModel(module);
        _treeModel.attachTreeView(jTree1, new Runnable() {
            @Override
            public void run() {
                fillInputFields(_treeModel.getSelection());
            }
        });
        jTree1.setModel(_treeModel);
        fillInputFields(module._node);
        _treeModel.selectNodeOnTree(module._node);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jSplitPane3 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jButtonNewChildTag = new javax.swing.JButton();
        jButtonDeleteThisTag = new javax.swing.JButton();
        jButtonDuplicateThisTag = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldTagPath = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTextAreaTextContent = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jButtonRemoveAttribute = new javax.swing.JButton();
        jButtonAddAttribute = new javax.swing.JButton();
        jButtonEditAttribute = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanelBrowse = new javax.swing.JPanel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jSplitPane2 = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();
        jScrollPane4 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jButtonClose = new javax.swing.JButton();
        jButtonEditInst = new javax.swing.JButton();
        jButtonEditCC = new javax.swing.JButton();

        setLayout(new java.awt.GridBagLayout());

        jSplitPane1.setDividerLocation(300);

        jSplitPane3.setDividerLocation(200);
        jSplitPane3.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jButtonNewChildTag.setText("+Create Child Tag");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jButtonNewChildTag, gridBagConstraints);

        jButtonDeleteThisTag.setText("-Delete ThisTag");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jButtonDeleteThisTag, gridBagConstraints);

        jButtonDuplicateThisTag.setText("+Duplicate This Tag");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel1.add(jButtonDuplicateThisTag, gridBagConstraints);

        jLabel7.setText("Text Content");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTH;
        jPanel1.add(jLabel7, gridBagConstraints);

        jTextFieldTagPath.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel1.add(jTextFieldTagPath, gridBagConstraints);

        jLabel5.setText("Tag Path in XML");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel1.add(jLabel5, gridBagConstraints);

        jLabel2.setText(" ");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jLabel2, gridBagConstraints);

        jTextAreaTextContent.setEditable(false);
        jTextAreaTextContent.setColumns(20);
        jTextAreaTextContent.setRows(5);
        jTextAreaTextContent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTextAreaTextContentMousePressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTextAreaTextContent);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPane2, gridBagConstraints);

        jSplitPane3.setTopComponent(jPanel1);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Attributes"));
        jPanel2.setLayout(new java.awt.GridBagLayout());

        jButtonRemoveAttribute.setText("- Remove");
        jButtonRemoveAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRemoveAttributeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        jPanel2.add(jButtonRemoveAttribute, gridBagConstraints);

        jButtonAddAttribute.setText("+");
        jButtonAddAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddAttributeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(jButtonAddAttribute, gridBagConstraints);

        jButtonEditAttribute.setText("Edit");
        jButtonEditAttribute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditAttributeActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(jButtonEditAttribute, gridBagConstraints);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null}
            },
            new String [] {
                "Name", "Value"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(jTable1);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jScrollPane3, gridBagConstraints);

        jSplitPane3.setBottomComponent(jPanel2);

        jSplitPane1.setRightComponent(jSplitPane3);

        jPanelBrowse.setBorder(javax.swing.BorderFactory.createTitledBorder("Browse"));
        jPanelBrowse.setLayout(new java.awt.GridBagLayout());

        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.weightx = 1.0;
        jPanelBrowse.add(jComboBox1, gridBagConstraints);

        jSplitPane2.setDividerLocation(300);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jScrollPane1.setViewportView(jTree1);

        jSplitPane2.setTopComponent(jScrollPane1);

        jList1.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jList1ValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(jList1);

        jSplitPane2.setBottomComponent(jScrollPane4);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanelBrowse.add(jSplitPane2, gridBagConstraints);

        jLabel1.setText("Module");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanelBrowse.add(jLabel1, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanelBrowse);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jSplitPane1, gridBagConstraints);

        jButtonClose.setText("Close");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jButtonClose, gridBagConstraints);

        jButtonEditInst.setText("Edit Inst");
        jButtonEditInst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditInstActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jButtonEditInst, gridBagConstraints);

        jButtonEditCC.setText("Edit CC");
        jButtonEditCC.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEditCCActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jButtonEditCC, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextAreaTextContentMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaTextContentMousePressed
        if (_selection == null) {
            return;
        }
        NavigatorForText prompt = new NavigatorForText(_selection.getTextContent());
        MXUtil.showAsDialog(this, prompt, "Text For Tag");
        if (prompt.getReturnStatus() == INavigator.RETURN_STATUS_APPROVED) {
            String result = prompt.getReturnValue();
            if (result != null) {
                _selection.setTextContent(result);
                jTextAreaTextContent.setText(result);
            }
        }
    }//GEN-LAST:event_jTextAreaTextContentMousePressed

    private void jButtonAddAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddAttributeActionPerformed
        if (_selection == null) {
            return;
        }

        NavigatorForNodeAttribute prompt = new NavigatorForNodeAttribute(_selection, null);
        MXUtil.showAsDialog(this, prompt, "Attribute");
        if (prompt.getReturnStatus() == INavigator.RETURN_STATUS_APPROVED) {
            MXWrap<String> result = prompt.getReturnValue();
            if (result == null) {
                return;
            }
            int already = _selection._listAttributes.indexOfName(result._name);
            if (already >= 0) {
                JOptionPane.showMessageDialog(this, "Already having attriute named [" + result._name + "]");
                return;
            }
            _selection._listAttributes.addNameAndValue(result._name, result._value);
            _treeModel.selectNodeOnTree(_selection);
        }

    }//GEN-LAST:event_jButtonAddAttributeActionPerformed

    private void jButtonRemoveAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRemoveAttributeActionPerformed
        if (_selection == null) {
            return;
        }
        int row = jTable1.getSelectedRow();

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        if (model == null) {
            return; //under constuction
        }
        String name = (String) model.getValueAt(row, 0);
        String value = (String) model.getValueAt(row, 1);

        int x = JOptionPane.showConfirmDialog(this, "Remove attrribute [" + name + "=" + value + "]", "Remove Attribute", JOptionPane.YES_NO_OPTION);

        if (x == JOptionPane.YES_OPTION) {
            int i = _selection._listAttributes.indexOfName(name);
            _selection._listAttributes.remove(i);
             _treeModel.selectNodeOnTree(_selection);
       }
    }//GEN-LAST:event_jButtonRemoveAttributeActionPerformed

    private void jButtonEditAttributeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditAttributeActionPerformed
        if (_selection == null) {
            return;
        }
        int row = jTable1.getSelectedRow();

        if (row < 0) {
            return;
        }

        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        if (model == null) {
            return; //under constuction
        }
        String name = (String) model.getValueAt(row, 0);

        NavigatorForNodeAttribute prompt = new NavigatorForNodeAttribute(_selection, name);
        MXUtil.showAsDialog(this, prompt, "Attritutes");
        if (prompt.getReturnStatus() == INavigator.RETURN_STATUS_APPROVED) {
            MXWrap<String> result = prompt.getReturnValue();
            if (result != null) {
                if (result._name == null || result._name.length() == 0) {
                    return;
                }
                if (name.equals(result._name)) {
                    int prevIndex = _selection._listAttributes.indexOfName(name);
                    _selection._listAttributes.set(prevIndex, new MXWrap<>(name, result._value));
                } else {
                    int prevIndex = _selection._listAttributes.indexOfName(name);
                    _selection._listAttributes.remove(prevIndex);
                    _selection._listAttributes.addNameAndValue(result._name, result._value);
                }
               _treeModel.selectNodeOnTree(_selection);
           }
        }

    }//GEN-LAST:event_jButtonEditAttributeActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        int sel = jComboBox1.getSelectedIndex();
        if (sel < 0) {
            return;
        }
        fillTreeSub(_file.listModules().get(sel));
    }//GEN-LAST:event_jComboBox1ActionPerformed


    private void jList1ValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jList1ValueChanged
        int index = jList1.getSelectedIndex();
        if (index >= 0) {
            CXNode node = _warningListModel.valueOfIndex(index);

            _treeModel.selectNodeOnTree(node);
        }
    }//GEN-LAST:event_jList1ValueChanged

    private void jButtonEditInstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditInstActionPerformed
        PickerForinstrument inst = new PickerForinstrument(_file);
        MXUtil.showAsDialog(this, inst, "Edit Instruments");        
    }//GEN-LAST:event_jButtonEditInstActionPerformed

    private void jButtonEditCCActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEditCCActionPerformed
        PickerForControlChange inst = new PickerForControlChange(_file);
        MXUtil.showAsDialog(this, inst, "Edit ControlChange");        
    }//GEN-LAST:event_jButtonEditCCActionPerformed

    private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
        MXUtil.getOwnerWindow(this).setVisible(false);
    }//GEN-LAST:event_jButtonCloseActionPerformed

    MXWrapList<CXNode> _warningListModel;

    /**
     *
     * @return
     */
    public MXWrapList<CXNode> createWarningListModel() {
        MXWrapList<CXNode> ret = new MXWrapList<>();
        for (CXNode warn : _file.listWarning()) {
            int line = warn.getLineNumber();
            int col = warn.getColumnNumber();
            ret.addNameAndValue("" + line + ", " + col + ": " + warn.getWarningText(), warn);
        }
        _warningListModel = ret;
        return ret;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddAttribute;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonDeleteThisTag;
    private javax.swing.JButton jButtonDuplicateThisTag;
    private javax.swing.JButton jButtonEditAttribute;
    private javax.swing.JButton jButtonEditCC;
    private javax.swing.JButton jButtonEditInst;
    private javax.swing.JButton jButtonNewChildTag;
    private javax.swing.JButton jButtonRemoveAttribute;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JList<String> jList1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanelBrowse;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JSplitPane jSplitPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextArea jTextAreaTextContent;
    private javax.swing.JTextField jTextFieldTagPath;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables
}
