/*
 * Copyright (C) 2023 Syntarou YOSHIDA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx50resolution;

import java.awt.Color;
import java.awt.Component;
import java.awt.Container;
import java.util.LinkedList;
import java.util.TreeSet;
import jp.synthtarou.midimixer.ccxml.CCMParser;
import jp.synthtarou.midimixer.ccxml.PickerForControlChange;
import jp.synthtarou.midimixer.libs.midi.MXMessage;
import jp.synthtarou.midimixer.libs.midi.MXMessageFactory;
import jp.synthtarou.midimixer.libs.midi.MXTemplate;
import jp.synthtarou.midimixer.libs.navigator.INavigator;
import jp.synthtarou.midimixer.libs.swing.MXModalFrame;
import jp.synthtarou.midimixer.libs.wraplist.MXWrapList;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MXResolutionView extends javax.swing.JPanel {
    MXResolution _resolution;
    MXWrapList<Integer> _listResolution;
        
    /**
     * Creates new form MX50ResolutionView
     */
    public MXResolutionView(MXResolution resolution) {
        initComponents();
        _resolution = resolution;
        resolution._bindedView = this;
        _listResolution = new MXWrapList<>();
        int []newReso = new int [] {
            -1, 8, 16, 32, 64, 128, 256, 512
        };
        TreeSet<Integer> sort = new TreeSet();
        for (int x : newReso) {
            sort.add(x);
        }
        sort.add(resolution._resolution);
        for (Integer x : sort) {
            _listResolution.addNameAndValue(Integer.toString(x), x);
        }
        jComboBoxResolution.setModel(_listResolution);
        jComboBoxResolution.setSelectedIndex(_listResolution.indexOfValue(resolution._resolution));
        resetBackground();
    }
    
    @Override
    public Color getBackground() {
        if (_resolution == null) {
            return Color.white;
        }
        int x = _resolution._process.indexOfResolution(_resolution) % 3;
        switch(x) {
            case 0:            
                return new Color(255, 255, 240);
            case 1:
                return new Color( 255, 240, 255);
            default:
                return new Color(240, 255, 255);
        }
    }

    public void resetBackground() {
        LinkedList<Component> list = new LinkedList<>();
        list.add(this);
        while(list.isEmpty() == false) {
            Component seek = list.removeFirst();
            seek.setBackground(null);
            if (seek instanceof Container) {
                Container cont = (Container)seek; 
                for (Component child : cont.getComponents()) {
                    list.add(child);
                }
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanelNewResolution = new javax.swing.JPanel();
        jComboBoxResolution = new javax.swing.JComboBox<>();
        jPanelLastDetected = new javax.swing.JPanel();
        jLabelLastDetect = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextFieldCommand = new javax.swing.JTextField();
        jTextFieldGate = new javax.swing.JTextField();
        jTextFieldChannel = new javax.swing.JTextField();

        setBorder(javax.swing.BorderFactory.createTitledBorder("Resolution"));
        setLayout(new java.awt.GridBagLayout());

        jPanelNewResolution.setLayout(new java.awt.GridBagLayout());

        jComboBoxResolution.setPreferredSize(new java.awt.Dimension(50, 26));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelNewResolution.add(jComboBoxResolution, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanelNewResolution, gridBagConstraints);

        jPanelLastDetected.setLayout(new java.awt.GridBagLayout());

        jLabelLastDetect.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanelLastDetected.add(jLabelLastDetect, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanelLastDetected, gridBagConstraints);

        jLabel1.setText("New Resolution");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(jLabel1, gridBagConstraints);

        jLabel2.setText("Monitor");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(jLabel2, gridBagConstraints);

        jLabel3.setText("Command");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(jLabel3, gridBagConstraints);

        jLabel6.setText("Gate");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(jLabel6, gridBagConstraints);

        jLabel7.setText("Channel");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 0);
        add(jLabel7, gridBagConstraints);

        jTextFieldCommand.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jTextFieldCommand, gridBagConstraints);

        jTextFieldGate.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jTextFieldGate, gridBagConstraints);

        jTextFieldChannel.setEditable(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 10);
        add(jTextFieldChannel, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    public void startEditCommand() {
        PickerForControlChange picker = new PickerForControlChange(false);
        MXModalFrame.showAsDialog(this, picker, "Picker");
        if (picker.getReturnStatus() != INavigator.RETURN_STATUS_APPROVED) {
            return;
        }

        CCMParser x = picker.getReturnValue();
        if (x != null) {
            try {
                MXTemplate template = new MXTemplate(x._data);
                int port = _resolution._port;
                int gate = _resolution._gate;
                int ch = _resolution._channel;
                MXMessage message = MXMessageFactory.fromTemplate(port, template, ch, x._gate, x._value);
            } catch (Throwable e) {
                e.printStackTrace();
            }
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> jComboBoxResolution;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelLastDetect;
    private javax.swing.JPanel jPanelLastDetected;
    private javax.swing.JPanel jPanelNewResolution;
    private javax.swing.JTextField jTextFieldChannel;
    private javax.swing.JTextField jTextFieldCommand;
    private javax.swing.JTextField jTextFieldGate;
    // End of variables declaration//GEN-END:variables
}
