/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx60output;

import javax.swing.BoxLayout;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.SwingUtilities;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import jp.synthtarou.libs.MXUtil;
import jp.synthtarou.libs.namedobject.MXNamedObjectList;
import jp.synthtarou.midimixer.libs.midi.port.MXMIDIOut;
import jp.synthtarou.midimixer.mx63patch.MX63Process;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MX60View extends javax.swing.JPanel {
    boolean _useSkipCC = true;
    MXNamedObjectList<Integer> _recPortList;
    MX60MidiOutListPanel _midiPanel;
    ButtonGroup _recorderGroup;
    MX60Process _process;
    MX63Process _detail;

    /**
     * Creates new form MX60View
     */
    public MX60View(MX60Process process) {
        initComponents();
        _process = process;

        _midiPanel = new MX60MidiOutListPanel(_process);
        jPanelOutputSelect.add(_midiPanel);
 
        _recorderGroup = new ButtonGroup();
        _recorderGroup.add(jRadioButtonSong1);
        _recorderGroup.add(jRadioButtonSong2);
        _recorderGroup.add(jRadioButtonSong3);
        _recorderGroup.add(jRadioButtonSong4);
        _recorderGroup.add(jRadioButtonSong5);
        jRadioButtonSong1.setSelected(true);
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(10000);

        _detail = new MX63Process(true);
        _detail.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                _midiPanel.refreshList();
            }
        });
        jPanelDetail.setLayout(new BoxLayout(jPanelDetail, BoxLayout.LINE_AXIS));
        jPanelDetail.add(_detail.getReceiverView());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel4 = new javax.swing.JPanel();
        jRadioButtonSong1 = new javax.swing.JRadioButton();
        jRadioButtonSong2 = new javax.swing.JRadioButton();
        jRadioButtonSong3 = new javax.swing.JRadioButton();
        jRadioButtonSong4 = new javax.swing.JRadioButton();
        jRadioButtonSong5 = new javax.swing.JRadioButton();
        jButtonSongExport = new javax.swing.JButton();
        jToggleButtonRec = new javax.swing.JToggleButton();
        jToggleButtonPlay = new javax.swing.JToggleButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanelOutputSelect = new javax.swing.JPanel();
        jPanelDetail = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Recorder"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jRadioButtonSong1.setText("Song1");
        jRadioButtonSong1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong1ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong1, new java.awt.GridBagConstraints());

        jRadioButtonSong2.setText("Song2");
        jRadioButtonSong2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong2ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong2, new java.awt.GridBagConstraints());

        jRadioButtonSong3.setText("Song3");
        jRadioButtonSong3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong3ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong3, new java.awt.GridBagConstraints());

        jRadioButtonSong4.setText("Song4");
        jRadioButtonSong4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong4ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong4, new java.awt.GridBagConstraints());

        jRadioButtonSong5.setText("Song5");
        jRadioButtonSong5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong5ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong5, new java.awt.GridBagConstraints());

        jButtonSongExport.setText("SaveNow");
        jButtonSongExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSongExportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel4.add(jButtonSongExport, gridBagConstraints);

        jToggleButtonRec.setText("Rec");
        jToggleButtonRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRecActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jToggleButtonRec, gridBagConstraints);

        jToggleButtonPlay.setText("Play");
        jToggleButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlayActionPerformed(evt);
            }
        });
        jPanel4.add(jToggleButtonPlay, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jProgressBar1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel4, gridBagConstraints);

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanelOutputSelect.setBorder(javax.swing.BorderFactory.createTitledBorder("Output"));
        jPanelOutputSelect.setLayout(new javax.swing.BoxLayout(jPanelOutputSelect, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane1.setLeftComponent(jPanelOutputSelect);

        jPanelDetail.setBorder(javax.swing.BorderFactory.createTitledBorder("Filter"));
        jSplitPane1.setRightComponent(jPanelDetail);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jSplitPane1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jToggleButtonRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRecActionPerformed
        int x = getSelectedTrack();
        if (x < 0) {
            return;
        }
        if (jToggleButtonRec.isSelected()) {
            jProgressBar1.setIndeterminate(true);
            _process._viewData.startRecording(x);   
        }
        else {
            jProgressBar1.setIndeterminate(false);
            _process._viewData.stopRecording();
        }
        enableRecordingButton();
    }//GEN-LAST:event_jToggleButtonRecActionPerformed

    private void jToggleButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlayActionPerformed
        int x = getSelectedTrack();
        if (x < 0) {
            return;
        }
        if (jToggleButtonPlay.isSelected()) {
            _process._viewData.startPlaying(x);   
        }
        else {
            _process._viewData.stopPlaying();
        }
        enableRecordingButton();
    }//GEN-LAST:event_jToggleButtonPlayActionPerformed

    private void jRadioButtonSong5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong5ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong5ActionPerformed

    private void jRadioButtonSong4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong4ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong4ActionPerformed

    private void jRadioButtonSong3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong3ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong3ActionPerformed

    private void jRadioButtonSong2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong2ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong2ActionPerformed

    private void jRadioButtonSong1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong1ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong1ActionPerformed

    private void jButtonSongExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSongExportActionPerformed
        if (_process._viewData.saveSequenceData() == false) {
            JOptionPane.showMessageDialog(this, "Error while saving MIDI", "Information", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jButtonSongExportActionPerformed
       
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonSongExport;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelDetail;
    private javax.swing.JPanel jPanelOutputSelect;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButtonSong1;
    private javax.swing.JRadioButton jRadioButtonSong2;
    private javax.swing.JRadioButton jRadioButtonSong3;
    private javax.swing.JRadioButton jRadioButtonSong4;
    private javax.swing.JRadioButton jRadioButtonSong5;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JToggleButton jToggleButtonPlay;
    private javax.swing.JToggleButton jToggleButtonRec;
    // End of variables declaration//GEN-END:variables

    public void tabActivated() {
        _midiPanel.refreshList();
    }
    
    public void setSongLengthDX(int recorder, long count) {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                setSongLengthDX(recorder, count);
            });
            return;
        }
        JRadioButton button = null;
        switch(recorder) {
            case 0:
                button = jRadioButtonSong1;
                break;
            case 1:
                button = jRadioButtonSong2;
                break;
            case 2:
                button = jRadioButtonSong3;
                break;
            case 3:
                button = jRadioButtonSong4;
                break;
            case 4:
                button = jRadioButtonSong5;
                break;
        }
        button.setText("Song" + (recorder+1) + ")" + MXUtil.digitalClock(count));
    }   

    private int countSongButton() {
        return 5;
    }
    
    private JRadioButton getSongButton(int x) {
        switch(x) {
            case 0:
                return jRadioButtonSong1;
            case 1:
                return jRadioButtonSong2;
            case 2:
                return jRadioButtonSong3;
            case 3:
                return jRadioButtonSong4;
            case 4:
                return jRadioButtonSong5;
        }
        return null;
    }

    private int getSelectedTrack() {
        for (int i = 0; i < countSongButton(); ++ i) {
            if (getSongButton(i).isSelected()) {
                return i;
            }
        }
        return -1;
    }
    
    private void enableRecordingButton() {
        if (_process._viewData.isRecording()) {
            jToggleButtonPlay.setEnabled(false);
            jToggleButtonRec.setEnabled(true);
        }
        else if (_process._viewData.isPlaying()) {
            jToggleButtonPlay.setEnabled(true);
            jToggleButtonRec.setEnabled(false);
        }
        else {
            jToggleButtonPlay.setSelected(false);
            jToggleButtonRec.setSelected(false);
            jToggleButtonRec.setEnabled(true);
            int x = getSelectedTrack();
            if (_process._viewData.hasRecorning(x)) {
                jToggleButtonPlay.setEnabled(true);
            }else {
                jToggleButtonPlay.setEnabled(false);
            }
        }
    }
    
    public void progress(long pos, long max) {
        double x = pos * 10000;
        if (max == 0) {
            x = 10000;
        }
        else {
            x /= max;
        }
        jProgressBar1.setValue((int)x);
    }
    
    public void progressStart() {
        enableRecordingButton();
    }

    public void progressFinish(boolean fine) {
        enableRecordingButton();
    }

    public void showViewData() {
        if (!SwingUtilities.isEventDispatchThread()) {
            SwingUtilities.invokeLater(() -> {
                showViewData();
            });
            return;
        }
        enableRecordingButton();
    }

    public void showMIDIOutDetail(MXMIDIOut out) {
        _detail.showMIDIOutDetail(out);
    }
}
