/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx60output;

import java.util.Vector;
import javax.swing.ButtonGroup;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JRadioButton;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;
import javax.swing.table.TableModel;
import jp.synthtarou.midimixer.MXAppConfig;
import jp.synthtarou.midimixer.libs.common.MXUtil;
import jp.synthtarou.midimixer.libs.common.MXWrapList;
import jp.synthtarou.midimixer.libs.midi.MXMidi;
import jp.synthtarou.midimixer.libs.midi.smf.SMFSequencer;
import jp.synthtarou.midimixer.libs.swing.JTableWithColumnHeader;
import jp.synthtarou.midimixer.libs.swing.JTableWithFooter;
import jp.synthtarou.midimixer.libs.swing.attachment.MXAttachTableResize;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MX60View extends javax.swing.JPanel {
    MX60Process _process;
    JTableWithColumnHeader _jTableSkip;
    boolean _useSkipCC = true;
    MXWrapList<Integer> _recPortList;
    MX60MidiOutListPanel _midiPanel;
    ButtonGroup _recorderGroup;
    
    /**
     * Creates new form MX60View
     */
    public MX60View(MX60Process process) {
        _process = process; 
        initComponents();

        _midiPanel = new MX60MidiOutListPanel();
        jPanelOutputSelect.add(_midiPanel);
        
        //_recPortList = MXMidi.createPort(false);
        //jComboBoxRecSong.setModel(_recPortList);
         
        _jTableSkip = new JTableWithFooter(jPanel1);
        new MXAttachTableResize(_jTableSkip);
        resetTableModel();
        _jTableSkip.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mousePressed(java.awt.event.MouseEvent evt) {
                if (_jTableSkip.isEnabled()) {
                    jTableSkip_MouseClicked(evt);
                }
            }
        });
        DefaultTableCellRenderer tableCellRenderer = new DefaultTableCellRenderer();
        tableCellRenderer.setHorizontalAlignment(JLabel.CENTER);

        for (int i = 1; i < _jTableSkip.getColumnCount(); ++ i) {
            TableColumn col = _jTableSkip.getColumnModel().getColumn(i);
            col.setCellRenderer(tableCellRenderer);
        }
        jCheckBoxUseSkip.setSelected(_process.isUsingThisRecipe());
        _jTableSkip.setEnabled(_process.isUsingThisRecipe());
        _recorderGroup = new ButtonGroup();
        _recorderGroup.add(jRadioButtonSong1);
        _recorderGroup.add(jRadioButtonSong2);
        _recorderGroup.add(jRadioButtonSong3);
        _recorderGroup.add(jRadioButtonSong4);
        _recorderGroup.add(jRadioButtonSong5);
        jRadioButtonSong1.setSelected(true);
        enableRecordingButton();
        jProgressBar1.setMinimum(0);
        jProgressBar1.setMaximum(10000);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jSplitPane2 = new javax.swing.JSplitPane();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jCheckBoxUseSkip = new javax.swing.JCheckBox();
        jPanel4 = new javax.swing.JPanel();
        jLabelRecorderText = new javax.swing.JLabel();
        jRadioButtonSong1 = new javax.swing.JRadioButton();
        jRadioButtonSong2 = new javax.swing.JRadioButton();
        jRadioButtonSong3 = new javax.swing.JRadioButton();
        jRadioButtonSong4 = new javax.swing.JRadioButton();
        jRadioButtonSong5 = new javax.swing.JRadioButton();
        jButtonSongExport = new javax.swing.JButton();
        jToggleButtonRec = new javax.swing.JToggleButton();
        jToggleButtonPlay = new javax.swing.JToggleButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanelOutputSelect = new javax.swing.JPanel();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane2.setDividerLocation(250);
        jSplitPane2.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);

        jPanel3.setLayout(new java.awt.GridBagLayout());

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("1.Output Filter"));
        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel2.add(jPanel1, gridBagConstraints);

        jCheckBoxUseSkip.setText("Use This Recipe");
        jCheckBoxUseSkip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBoxUseSkipActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel2.add(jCheckBoxUseSkip, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel3.add(jPanel2, gridBagConstraints);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("2. Recorder"));
        jPanel4.setLayout(new java.awt.GridBagLayout());

        jLabelRecorderText.setText("Tempo");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jLabelRecorderText, gridBagConstraints);

        jRadioButtonSong1.setText("Song1");
        jRadioButtonSong1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong1ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong1, new java.awt.GridBagConstraints());

        jRadioButtonSong2.setText("Song2");
        jRadioButtonSong2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong2ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong2, new java.awt.GridBagConstraints());

        jRadioButtonSong3.setText("Song3");
        jRadioButtonSong3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong3ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong3, new java.awt.GridBagConstraints());

        jRadioButtonSong4.setText("Song4");
        jRadioButtonSong4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong4ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong4, new java.awt.GridBagConstraints());

        jRadioButtonSong5.setText("Song5");
        jRadioButtonSong5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRadioButtonSong5ActionPerformed(evt);
            }
        });
        jPanel4.add(jRadioButtonSong5, new java.awt.GridBagConstraints());

        jButtonSongExport.setText("SaveNow");
        jButtonSongExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSongExportActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 9;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        jPanel4.add(jButtonSongExport, gridBagConstraints);

        jToggleButtonRec.setText("Rec");
        jToggleButtonRec.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonRecActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 6;
        gridBagConstraints.gridy = 0;
        jPanel4.add(jToggleButtonRec, gridBagConstraints);

        jToggleButtonPlay.setText("Play");
        jToggleButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButtonPlayActionPerformed(evt);
            }
        });
        jPanel4.add(jToggleButtonPlay, new java.awt.GridBagConstraints());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 8;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        jPanel4.add(jProgressBar1, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        jPanel3.add(jPanel4, gridBagConstraints);

        jSplitPane2.setRightComponent(jPanel3);

        jPanelOutputSelect.setBorder(javax.swing.BorderFactory.createTitledBorder("2.Output Assign"));
        jPanelOutputSelect.setLayout(new javax.swing.BoxLayout(jPanelOutputSelect, javax.swing.BoxLayout.LINE_AXIS));
        jSplitPane2.setLeftComponent(jPanelOutputSelect);

        add(jSplitPane2);
    }// </editor-fold>//GEN-END:initComponents

    private void jCheckBoxUseSkipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBoxUseSkipActionPerformed
         _process.setUsingThisRecipe(jCheckBoxUseSkip.isSelected());
        _jTableSkip.setEnabled(jCheckBoxUseSkip.isSelected());
    }//GEN-LAST:event_jCheckBoxUseSkipActionPerformed

    private void jToggleButtonRecActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonRecActionPerformed
        int x = getSelectedTrack();
        if (x < 0) {
            return;
        }
        if (jToggleButtonRec.isSelected()) {
            jProgressBar1.setIndeterminate(true);
            _process.startRecording(x);   
        }
        else {
            jProgressBar1.setIndeterminate(false);
            _process.stopRecording();
        }
        enableRecordingButton();
    }//GEN-LAST:event_jToggleButtonRecActionPerformed

    private void jToggleButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButtonPlayActionPerformed
        int x = getSelectedTrack();
        if (x < 0) {
            return;
        }
        if (jToggleButtonPlay.isSelected()) {
            _process.startPlaying(x);   
        }
        else {
            _process.stopPlaying();
        }
        enableRecordingButton();
    }//GEN-LAST:event_jToggleButtonPlayActionPerformed

    private void jRadioButtonSong5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong5ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong5ActionPerformed

    private void jRadioButtonSong4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong4ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong4ActionPerformed

    private void jRadioButtonSong3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong3ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong3ActionPerformed

    private void jRadioButtonSong2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong2ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong2ActionPerformed

    private void jRadioButtonSong1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRadioButtonSong1ActionPerformed
        enableRecordingButton();
    }//GEN-LAST:event_jRadioButtonSong1ActionPerformed

    private void jButtonSongExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSongExportActionPerformed
        if (_process.saveSequenceData() == false) {
            JOptionPane.showMessageDialog(this, "Error while saving MIDI", "Information", JOptionPane.OK_OPTION);
        }
    }//GEN-LAST:event_jButtonSongExportActionPerformed

    public synchronized TableModel createSkipTableModel() {
        DefaultTableModel model = new DefaultTableModel() {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };

        model.addColumn("");
        
        for (int i = 0; i < MXAppConfig.TOTAL_PORT_COUNT; ++ i) {
            model.addColumn(MXMidi.nameOfPortShort(i));
        }
        
        for (int type = 0; type < _process._data.TYPE_COUNT; ++ type) {
            Vector line = new Vector();
            line.add(_process._data.typeNames[type]);
            
            for (int delivery = 0; delivery < MXAppConfig.TOTAL_PORT_COUNT; ++ delivery) {
                if (_process._data.isSkip(delivery, type)) {
                    line.add("Skip");
                }else {
                    line.add("");
                }
            }
            model.addRow(line);
        }
        return model;

    }

    private void jTableSkip_MouseClicked(java.awt.event.MouseEvent evt) {                                     
        int row = _jTableSkip.rowAtPoint(evt.getPoint());
        int column = _jTableSkip.columnAtPoint(evt.getPoint());
        
        int type = row;
        int port = column - 1;
        DefaultTableModel model = (DefaultTableModel)_jTableSkip.getModel();
        
        if (port >= 0 && port < MXAppConfig.TOTAL_PORT_COUNT) {
            if (_process._data.isSkip(port, type)) {
                _process._data.setSkip(port, type, false);
                model.setValueAt("", row, column);
            }else {
                _process._data.setSkip(port, type, true);
                model.setValueAt("Skip", row, column);
            }
        }
    }                                    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonSongExport;
    private javax.swing.JCheckBox jCheckBoxUseSkip;
    private javax.swing.JLabel jLabelRecorderText;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelOutputSelect;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JRadioButton jRadioButtonSong1;
    private javax.swing.JRadioButton jRadioButtonSong2;
    private javax.swing.JRadioButton jRadioButtonSong3;
    private javax.swing.JRadioButton jRadioButtonSong4;
    private javax.swing.JRadioButton jRadioButtonSong5;
    private javax.swing.JSplitPane jSplitPane2;
    private javax.swing.JToggleButton jToggleButtonPlay;
    private javax.swing.JToggleButton jToggleButtonRec;
    // End of variables declaration//GEN-END:variables

    public void resetTableModel() {
        _jTableSkip.setModel(createSkipTableModel());
        _jTableSkip.getColumnModel().getColumn(0).setMinWidth(150);
    }
    
    public void refreshList() {
        _midiPanel.refreshList();
    }
    
    public void setRecorderText(String text) {
        //String.valueOf("Tempo " + (60000000 / mpq) + " BPM"
        jLabelRecorderText.setText(text);
    }
    
    public void setSongLength(int recorder, long count) {
        JRadioButton button = null;
        switch(recorder) {
            case 0:
                button = jRadioButtonSong1;
                break;
            case 1:
                button = jRadioButtonSong2;
                break;
            case 2:
                button = jRadioButtonSong3;
                break;
            case 3:
                button = jRadioButtonSong4;
                break;
            case 4:
                button = jRadioButtonSong5;
                break;
        }
        button.setText("Song" + (recorder+1) + ")" + MXUtil.digitalClock(count));
    }   

    public int countSongButton() {
        return 5;
    }
    
    public JRadioButton getSongButton(int x) {
        switch(x) {
            case 0:
                return jRadioButtonSong1;
            case 1:
                return jRadioButtonSong2;
            case 2:
                return jRadioButtonSong3;
            case 3:
                return jRadioButtonSong4;
            case 4:
                return jRadioButtonSong5;
        }
        return null;
    }

    public int getSelectedTrack() {
        for (int i = 0; i < countSongButton(); ++ i) {
            if (getSongButton(i).isSelected()) {
                return i;
            }
        }
        return -1;
    }
    
    public void enableRecordingButton() {
        int x = getSelectedTrack();
        if (_process.isRecording()) {
            jToggleButtonPlay.setEnabled(false);
            jToggleButtonRec.setEnabled(true);
        }
        else if (_process.isPlaying()) {
            jToggleButtonPlay.setEnabled(true);
            jToggleButtonRec.setEnabled(false);
        }
        else {
            jToggleButtonPlay.setSelected(false);
            jToggleButtonRec.setSelected(false);
            jToggleButtonRec.setEnabled(true);
            if (_process.hasRecorning(x)) {
                jToggleButtonPlay.setEnabled(true);
            }else {
                jToggleButtonPlay.setEnabled(false);
            }
        }
    }
    
    public void progress(long pos, long max) {
        double x = pos * 10000;
        if (max == 0) {
            x = 10000;
        }
        else {
            x /= max;
        }
        jProgressBar1.setValue((int)x);
    }
    
    public void progressStart() {
        enableRecordingButton();
    }

    public void progressFinish(boolean fine) {
        enableRecordingButton();
    }
}
