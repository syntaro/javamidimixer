/*
 * Copyright (C) 2024 Syntarou YOSHIDA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx13patch;

import java.awt.Color;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import jp.synthtarou.libs.MXCountdownTimer;
import jp.synthtarou.libs.MXUtil;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MX13View extends javax.swing.JPanel {

    MX13Process _process;
    int _stopFeedback = 1;

    public static void main(String[] args) {
        MX13Process process = new MX13Process(true);
        MXUtil.showAsDialog(null, process.getReceiverView(), "Test");
    }

    CheckableListCellRenderer selectFrom;
    CheckableListCellRenderer selectTo;
    CheckableListCellRenderer selectFilter;

    /**
     * Creates new form MX13View
     *
     * @param process
     */
    public MX13View(MX13Process process) {
        initComponents();
        _process = process;
        DefaultListModel<MX13From> info = new DefaultListModel<>();
        for (MX13From seek : _process._list) {
            info.addElement(seek);
        }
        selectFrom = new CheckableListCellRenderer<MX13From>(jListFrom);
        selectTo = new CheckableListCellRenderer<MX13To>(jListTo);
        selectFilter = new CheckableListCellRenderer<MX13SignalType>(jListSignalType);
        jListFrom.setCellRenderer(selectFrom);
        jListTo.setCellRenderer(selectTo);
        jListSignalType.setCellRenderer(selectFilter);
        jListFrom.setModel(info);
        _stopFeedback--;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPaneFrom = new javax.swing.JScrollPane();
        jListFrom = new javax.swing.JList<>();
        jScrollPaneTo = new javax.swing.JScrollPane();
        jListTo = new javax.swing.JList<>();
        jScrollPaneFilter = new javax.swing.JScrollPane();
        jListSignalType = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();

        setLayout(new javax.swing.BoxLayout(this, javax.swing.BoxLayout.LINE_AXIS));

        jSplitPane1.setDividerLocation(200);
        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.8);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jListFrom.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListFromValueChanged(evt);
            }
        });
        jScrollPaneFrom.setViewportView(jListFrom);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPaneFrom, gridBagConstraints);

        jListTo.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListToValueChanged(evt);
            }
        });
        jScrollPaneTo.setViewportView(jListTo);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPaneTo, gridBagConstraints);

        jListSignalType.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListSignalTypeValueChanged(evt);
            }
        });
        jScrollPaneFilter.setViewportView(jListSignalType);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(jScrollPaneFilter, gridBagConstraints);

        jLabel3.setText("Signal From");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jLabel3, gridBagConstraints);

        jLabel2.setText("To");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jLabel2, gridBagConstraints);

        jLabel1.setText("Which(  OR )");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 10, 0, 10);
        jPanel1.add(jLabel1, gridBagConstraints);

        jSplitPane1.setLeftComponent(jPanel1);

        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel2.add(jScrollPane1);

        jSplitPane1.setRightComponent(jPanel2);

        add(jSplitPane1);
    }// </editor-fold>//GEN-END:initComponents

    int _selectedFrom = -1;
    int _selectedTo = -1;

    private void jListFromValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListFromValueChanged
        if (_stopFeedback > 0) {
            return;
        }
        _stopFeedback++;
        try {
            int index = jListFrom.getSelectedIndex();
            if (index < 0) {
                return;
            }
            if (_selectedFrom != index) {
                _selectedFrom = index;
                MX13From from = _process._list.get(_selectedFrom);
                ArrayList<MX13To> listTo = from._listTo;
                _selectedTo = -1;
                DefaultListModel<MX13To> model = new DefaultListModel<>();
                for (MX13To seek : listTo) {
                    model.addElement(seek);
                }
                jListTo.setModel(model);
                Color oColor = jListFrom.getBackground();
                jListTo.setSelectedIndex(-1);
                jListFrom.setBackground(Color.cyan);
                MXCountdownTimer.letsCountdown(100, () -> {
                    jListFrom.setBackground(oColor);
                    jListTo.setBackground(Color.cyan);
                    MXCountdownTimer.letsCountdown(100, () -> {
                        jListTo.setBackground(oColor);
                        jScrollPaneTo.getVerticalScrollBar().setValue(0);
                    });
                });
            }
        } finally {
            _stopFeedback--;
        }

    }//GEN-LAST:event_jListFromValueChanged

    private void jListToValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListToValueChanged
        if (_stopFeedback > 0) {
            return;
        }
        _stopFeedback++;
        try {
            int index = jListTo.getSelectedIndex();
            if (index < 0) {
                return;
            }
            if (_selectedTo != index) {
                _selectedTo = index;
                MX13From from = _process._list.get(_selectedFrom);
                ArrayList<MX13To> listTo = from._listTo;
                MX13To to = listTo.get(_selectedTo);
                DefaultListModel<MX13SignalType> model = new DefaultListModel<>();
                for (MX13SignalType seek : to._list) {
                    model.addElement(seek);
                }
                jListSignalType.setModel(model);
                jListSignalType.setSelectedIndex(-1);

                Color oColor = jListTo.getBackground();
                jListTo.setBackground(Color.cyan);
                MXCountdownTimer.letsCountdown(100, () -> {
                    jListTo.setBackground(oColor);
                    jListSignalType.setBackground(Color.cyan);
                    MXCountdownTimer.letsCountdown(100, () -> {
                        jListSignalType.setBackground(oColor);
                        jScrollPaneFilter.getVerticalScrollBar().setValue(0);
                    });
                });
            }
        } finally {
            _stopFeedback--;
        }
    }//GEN-LAST:event_jListToValueChanged

    private void jListSignalTypeValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListSignalTypeValueChanged
        Color oColor = jListTo.getBackground();
        jListSignalType.setBackground(Color.cyan);
        MXCountdownTimer.letsCountdown(100, () -> {
            jListSignalType.setBackground(oColor);
         });
    }//GEN-LAST:event_jListSignalTypeValueChanged

    public void setInformation(String text) {
        jTextArea1.setText(text);
    }            

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JList<MX13From> jListFrom;
    private javax.swing.JList<jp.synthtarou.midimixer.mx13patch.MX13SignalType> jListSignalType;
    private javax.swing.JList<MX13To> jListTo;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPaneFilter;
    private javax.swing.JScrollPane jScrollPaneFrom;
    private javax.swing.JScrollPane jScrollPaneTo;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
