/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx36ccmapping;

import javax.swing.BorderFactory;
import javax.swing.JOptionPane;
import jp.synthtarou.midimixer.libs.common.MXWrapList;
import jp.synthtarou.midimixer.libs.navigator.INavigator;
import jp.synthtarou.midimixer.libs.navigator.NavigatorForText;
import jp.synthtarou.midimixer.libs.navigator.NavigatorForWrapList;
import jp.synthtarou.midimixer.libs.navigator.NavigatorUtil;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MX36View extends javax.swing.JPanel {

    MX36Process _process;
    MX36DetailPanel _detailPanel;
    MX36StatusListPanel _listPanel;
    /**
     * Creates new form MX36View
     */
    public MX36View(MX36Process process, MX36FolderList list) {
        initComponents();
        _process = process;
        _detailPanel = new MX36DetailPanel(process);
        jPanel2.add(_detailPanel);        
        jPanel2.setBorder(BorderFactory.createEmptyBorder());
        _listPanel = new MX36StatusListPanel(list);
        jPanel3.add(_listPanel);
    }

    public void fullReloadList(MX36FolderList list) {
        jPanel3.remove(_listPanel);
        _listPanel = new MX36StatusListPanel(list);
        jPanel3.add(_listPanel);
        _listPanel.revalidate();
        jPanel3.revalidate();
    }
    
    public void refreshList() {
    }
    
    public void focusStatus(MX36Status status) {
        _detailPanel.updateViewByStatus(status);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jButtonNewFolder = new javax.swing.JButton();
        jButtonMoveFolder = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();

        setLayout(new java.awt.GridBagLayout());

        jButtonNewFolder.setText("New Folder");
        jButtonNewFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNewFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jButtonNewFolder, gridBagConstraints);

        jButtonMoveFolder.setText("move Folder");
        jButtonMoveFolder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMoveFolderActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jButtonMoveFolder, gridBagConstraints);

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Pickuped"));
        jPanel2.setLayout(new javax.swing.BoxLayout(jPanel2, javax.swing.BoxLayout.LINE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        add(jPanel2, gridBagConstraints);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.LINE_AXIS));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jPanel3, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonNewFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNewFolderActionPerformed
        NavigatorForText navigator = new NavigatorForText("");
        NavigatorUtil.showNavigator(this, navigator,"Input Folder Name");
        if (navigator.getReturnStatus() == INavigator.RETURN_STATUS_APPROVED) {
            String text = navigator.getReturnValue();
            if (_process._list.getFolder(text) != null) {
                JOptionPane.showMessageDialog(this, "Already Exists", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
            _process._list.newFolder(text);
            if (_process._view != null) {
                _process._view.fullReloadList(_process._list);
            }
        }
        
    }//GEN-LAST:event_jButtonNewFolderActionPerformed

    private void jButtonMoveFolderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMoveFolderActionPerformed
        if (_detailPanel._status == null) {
            return;
        }
        MXWrapList<Integer> listFolder = new MXWrapList<>();
        int x = 0;
        for (MX36Folder folder : _process._list._listFolder) {
            listFolder.addNameAndValue(folder._folderName, x ++);
        }
        NavigatorForWrapList navi = new NavigatorForWrapList(listFolder);
        NavigatorUtil.showNavigator(this, navi, "Move To ... < your choice >");
        if (navi.getReturnStatus() == INavigator.RETURN_STATUS_APPROVED) {
            int y = navi.getReturnValue();
            x = 0;
            MX36Folder ret = null;
            for (MX36Folder folder : _process._list._listFolder) {
                if (x == y) {
                    ret = folder;
                }
                ++ x;
            }
            if (ret != null) {
                _process.moveFolder(ret, _detailPanel._status);
            }
        }
    }//GEN-LAST:event_jButtonMoveFolderActionPerformed
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonMoveFolder;
    private javax.swing.JButton jButtonNewFolder;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    // End of variables declaration//GEN-END:variables
}
