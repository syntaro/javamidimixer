/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx35cceditor;

import jp.synthtarou.midimixer.mx35cceditor.prompt.CCPromptUtil;
import java.awt.Dimension;
import javax.swing.JPanel;
import jp.synthtarou.midimixer.libs.common.MXWrapList;
import jp.synthtarou.midimixer.mx35cceditor.prompt.IInputPromptPanel;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class CCV12CategoryListPicker<T> extends javax.swing.JPanel implements IInputPromptPanel<T> {
    public static MXWrapList<String> create(String[] choise) {
        MXWrapList<String> list = new MXWrapList<>();
        for (String t : choise) {
            list.addNameAndValue(t, t);
        }
        return list;
    }

    public static MXWrapList<String> create(String choise) {
        MXWrapList<String> list = new MXWrapList<>();
        for (int i = 0; i < choise.length(); ++ i) {
            char ch = choise.charAt(i);
            String str = Character.toString(ch);
            list.addNameAndValue(str, str);
        }
        return list;
    }

    public static void main(String[] args) {
        MXWrapList<MXWrapList<String>> model = new MXWrapList<>();
        model.addNameAndValue("ABC", create("abcdefg"));
        model.addNameAndValue("HIJ", create("hijklmn"));
        model.addNameAndValue("OPQ", create("opqrstu"));
        model.addNameAndValue("VWX", create("vwxyz"));
        
        CCV12CategoryListPicker<String> picker = new CCV12CategoryListPicker<>(model, 2, 2);
        CCPromptUtil.showPrompt(null, picker);
        System.out.print(picker.getPromptResult());
    }

    MXWrapList<MXWrapList<T>> _listCategory;
    MXWrapList<T> _listChoise;
    int _selectedCaetegoryIndex;
    T _selectedObject; 
    boolean _initDone = false;

    /**
     * Creates new form CCV02ListSelector
     */
    public CCV12CategoryListPicker(MXWrapList<MXWrapList<T>> category, int selectedCategory, int selectedIndex) {
        initComponents();
        _listCategory = category;
        _listChoise = null;
        _selectedCaetegoryIndex = selectedCategory;
        jComboBoxCategory.setModel(_listCategory);
        if (selectedCategory >= 0) {
            jComboBoxCategory.setSelectedIndex(_selectedCaetegoryIndex);

            _listChoise = _listCategory.valueOfIndex(_selectedCaetegoryIndex);
            jListChoise.setModel(_listChoise);
            if (selectedIndex >= 0) {
               jListChoise.setSelectedIndex(selectedIndex);
            }
        }
        _initDone = true;
    }
    
    public void setCategoryTitle(String text) {
        jLabelCategory.setText(text);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jListChoise = new javax.swing.JList<>();
        jButtonCancel = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jLabelSelection = new javax.swing.JLabel();
        jLabelCategory = new javax.swing.JLabel();
        jComboBoxCategory = new javax.swing.JComboBox<>();

        setLayout(new java.awt.GridBagLayout());

        jListChoise.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListChoiseValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListChoise);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jButtonCancel, gridBagConstraints);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 6;
        add(jButtonOK, gridBagConstraints);

        jLabelSelection.setText("-");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        add(jLabelSelection, gridBagConstraints);

        jLabelCategory.setText("Category");
        add(jLabelCategory, new java.awt.GridBagConstraints());

        jComboBoxCategory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxCategoryActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jComboBoxCategory, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        if (!_initDone) {
            return;
        }
        _selectedObject = null;
        CCPromptUtil.closeAnyway(this);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        if (!_initDone) {
            return;
        }
        int sel = jListChoise.getSelectedIndex();
        if (sel >= 0) {
            _selectedObject = _listChoise.valueOfIndex(sel);
        }
        CCPromptUtil.closeAnyway(this);
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jListChoiseValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListChoiseValueChanged
        if (!_initDone) {
            return;
        }
        
        int debugSel = jListChoise.getSelectedIndex();
        String name = _listChoise.nameOfIndex(debugSel);
        T value = _listChoise.valueOfIndex(debugSel);
        
        jLabelSelection.setText(name + " = " + value);
    }//GEN-LAST:event_jListChoiseValueChanged

    private void jComboBoxCategoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxCategoryActionPerformed
        _initDone = false;
        try {
            _selectedCaetegoryIndex = jComboBoxCategory.getSelectedIndex();
            _listChoise = _listCategory.valueOfIndex(_selectedCaetegoryIndex);
            jListChoise.setModel(_listChoise);
        }finally {
            _initDone = true;
        }
    }//GEN-LAST:event_jComboBoxCategoryActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JComboBox<String> jComboBoxCategory;
    private javax.swing.JLabel jLabelCategory;
    private javax.swing.JLabel jLabelSelection;
    private javax.swing.JList<String> jListChoise;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getAsPanel() {
        return this;
    }

    @Override
    public String getPanelTitle() {
        return null;
    }

    @Override
    public Dimension getPanelSize() {
        return new Dimension(600, 600);
    }

    @Override
    public T getPromptResult() {
        return _selectedObject;
    }

    @Override
    public boolean validatePromptResult() {
        return true;
    }
    
}
