/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.mx30surface;

import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.SwingUtilities;
import jp.synthtarou.midimixer.libs.midi.MXMessage;
import jp.synthtarou.midimixer.libs.midi.MXTiming;
import jp.synthtarou.midimixer.libs.swing.MXModalFrame;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MGDrumPad extends javax.swing.JPanel {

    final MX32Mixer _mixer;
    int _row, _column;
    
    boolean _switchActive = false;

    public MGStatus getStatus() {
        return _mixer.getStatus(MGStatus.TYPE_DRUMPAD, _row, _column);
    }

    public void setStatus(MGStatus status) {
        _mixer.setStatus(MGStatus.TYPE_DRUMPAD, _row, _column, status);
    }

    public MGDrumPad(MX32Mixer process, int row, int column) {
        _mixer = process;
        _row = row;
        _column = column;
        initComponents();
        jLabel1.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    return;
                }
                getStatus()._drum.mouseDetected(null, true);
            }

            public void mouseReleased(MouseEvent e) {
                if (SwingUtilities.isRightMouseButton(e)) {
                    return;
                }
                getStatus()._drum.mouseDetected(null, false);
            }
        });
        updateUI();
    }

    public void setDrumActive(boolean newValue) {
        if (newValue) {
            _switchActive = true;
            //repaint with switchActive
            _mixer._view._focusGroup.setFocus(this); 
        }
        else {
            _switchActive= false;
            //repaint with switchActive
            _mixer._view._focusGroup.setFocus(this); 
        }
    }

    public void updateUI() {
        super.updateUI();
        if (jLabel1 != null) {
            MGStatus status = getStatus();
            if (status._name == null || status._name.length() == 0) {
                MXMessage message = status._base;
                jLabel1.setText(message.toStringForUI());
            } else {
                jLabel1.setText(status._name);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.focusStatusChanged
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jLabel1 = new javax.swing.JLabel();

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setLayout(new java.awt.GridBagLayout());

        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    // End of variables declaration//GEN-END:variables

    public void increment(MXTiming timing) {
        getStatus()._drum.mouseDetected(timing, true);
    }

    public void decriment(MXTiming timing) {
        getStatus()._drum.mouseDetected(timing, false);
    }

    public void editContoller() {
        _mixer._view.stopEditing();
        MGStatus status = (MGStatus) getStatus().clone();
        MGStatusPanel panel = new MGStatusPanel(_mixer, status);
        MXModalFrame.showAsDialog(this, panel, "Enter Edit Pad {row:" + _row + ", column:" + _column + "}");

        if (panel._okOption) {
            setStatus(panel._status);
            _mixer.notifyCacheBroken();
            updateUI();
        }
    }
}
