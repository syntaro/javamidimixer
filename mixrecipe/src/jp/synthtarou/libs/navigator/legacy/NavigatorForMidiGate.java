/*
 * Copyright 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.libs.navigator.legacy;

import java.awt.Container;
import java.awt.Dimension;
import javax.swing.JPanel;
import jp.synthtarou.libs.MXUtil;
import jp.synthtarou.libs.namedobject.MXNamedObjectList;
import jp.synthtarou.libs.namedobject.MXNamedObjectListFactory;
import jp.synthtarou.midimixer.libs.midi.MXMidi;


/**
 *
 * @author Syntarou YOSHIDA
 */
public class NavigatorForMidiGate extends javax.swing.JPanel implements INavigator<Integer>{
    
    public static void main(String[] args) {
        NavigatorForMidiGate navi = new NavigatorForMidiGate(MXMidi.COMMAND_CH_CONTROLCHANGE, 7);
        navi.simpleAsk(null);
        System.out.println(navi.getReturnStatus() + " = " + navi.getReturnValue());
    }
 
    int _stopFeedback = 1;
    
    public boolean simpleAsk(Container parent) {
        MXUtil.showAsDialog(parent, this, INavigator.DEFAULT_TITLE);
        if (this.getReturnStatus() == INavigator.RETURN_STATUS_APPROVED) {
            return true;
        }
        return false;
    }

    MXNamedObjectList<Integer> _modelCC = MXNamedObjectListFactory.listupControlChange(true);
    MXNamedObjectList<Integer> _modelNote = MXNamedObjectListFactory.listupControlChange(true);
    MXNamedObjectList<Integer> _modelNumber = MXNamedObjectListFactory.listupControlChange(true);
    MXNamedObjectList<Integer> _current = null;

    /**
     * Creates new form NavigatorForList
     */
    public NavigatorForMidiGate(int command, int selected) {
        initComponents();
        buttonGroup1.add(jRadioButtonNumber);
        buttonGroup1.add(jRadioButtonControlChange);
        buttonGroup1.add(jRadioButtonNote);
        setPreferredSize(new Dimension(400, 600));
        if (command == MXMidi.COMMAND_CH_CONTROLCHANGE) {
            _current = _modelCC;
        }
        else if (command == MXMidi.COMMAND_CH_NOTEON
             || command == MXMidi.COMMAND_CH_NOTEOFF
             || command == MXMidi.COMMAND_CH_POLYPRESSURE) {
            _current = _modelNote;
        }
        else {
            _current = _modelNumber;
        }
        _returnValue = selected;
        
        jListChoise.setModel(_current);
        jListChoise.setSelectedIndex(_current.indexOfValue(_returnValue));
        
        _stopFeedback --;

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListChoise = new javax.swing.JList<>();
        jButtonCancel = new javax.swing.JButton();
        jButtonOK = new javax.swing.JButton();
        jRadioButtonNumber = new javax.swing.JRadioButton();
        jRadioButtonControlChange = new javax.swing.JRadioButton();
        jRadioButtonNote = new javax.swing.JRadioButton();
        jLabelSelection = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jListChoise.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                jListChoiseValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(jListChoise);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.gridheight = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jButtonCancel.setText("Cancel");
        jButtonCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCancelActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.gridwidth = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jButtonCancel, gridBagConstraints);

        jButtonOK.setText("OK");
        jButtonOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonOKActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButtonOK, gridBagConstraints);

        jRadioButtonNumber.setText("number");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jRadioButtonNumber, gridBagConstraints);

        jRadioButtonControlChange.setText("control change");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jRadioButtonControlChange, gridBagConstraints);

        jRadioButtonNote.setText("key note");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jRadioButtonNote, gridBagConstraints);

        jLabelSelection.setText("Selected: -");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 5;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabelSelection, gridBagConstraints);

        jLabel1.setText("Type");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        add(jLabel1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        _returnStatus = INavigator.RETURN_STATUS_CANCELED;
        _returnValue = null;
        _returnIndex = -1;
        MXUtil.getOwnerWindow(this).setVisible(false);
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonOKActionPerformed
        int sel = jListChoise.getSelectedIndex();
        if (sel >= 0) {
            _returnIndex = sel;
            _returnValue = _current.valueOfIndex(sel);
            _returnStatus = INavigator.RETURN_STATUS_APPROVED;
            MXUtil.getOwnerWindow(this).setVisible(false);
        }
    }//GEN-LAST:event_jButtonOKActionPerformed

    private void jListChoiseValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_jListChoiseValueChanged
        if (_stopFeedback > 0) {
            return;
        }
        int debugSel = jListChoise.getSelectedIndex();
        String name = _current.nameOfIndex(debugSel);
        _returnValue = _current.valueOfIndex(debugSel);
        jLabelSelection.setText(_returnValue + " = \"" + name + "\"");
    }//GEN-LAST:event_jListChoiseValueChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButtonCancel;
    private javax.swing.JButton jButtonOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelSelection;
    private javax.swing.JList<String> jListChoise;
    private javax.swing.JRadioButton jRadioButtonControlChange;
    private javax.swing.JRadioButton jRadioButtonNote;
    private javax.swing.JRadioButton jRadioButtonNumber;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    @Override
    public JPanel getNavigatorPanel() {
        return this;
    }

    @Override
    public int getNavigatorType() {
        return INavigator.TYPE_SELECTOR;
    }

    @Override
    public boolean isNavigatorRemovable() {
        return false;
    }

    @Override
    public boolean validateWithNavigator(Integer result) {
        return true;
    }

    @Override
    public int getReturnStatus() {
        return _returnStatus;
    }

    @Override
    public Integer getReturnValue() {
        return _returnValue;
    }

    public int getReturnIndex() {
        return _returnIndex;
    }

    int _returnStatus = INavigator.RETURN_STATUS_NOTSET;
    Integer _returnValue = null;
    int _returnIndex = -1;
}
