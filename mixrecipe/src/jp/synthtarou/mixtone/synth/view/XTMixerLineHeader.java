/*
 * Copyright (C) 2024 Syntarou YOSHIDA
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.mixtone.synth.view;

import java.io.File;
import java.io.FileFilter;
import java.io.IOException;
import java.util.logging.Level;
import jp.synthtarou.libs.MXUtil;
import jp.synthtarou.libs.log.MXFileLogger;
import jp.synthtarou.libs.smf.SMFCallback;
import jp.synthtarou.libs.smf.OneMessage;
import jp.synthtarou.libs.smf.SMFSequencer;
import jp.synthtarou.midimixer.libs.swing.folderbrowser.FileFilterListExt;
import jp.synthtarou.midimixer.libs.swing.folderbrowser.FileList;
import jp.synthtarou.midimixer.libs.swing.folderbrowser.MXFolderBrowser;
import jp.synthtarou.mixtone.listmodel.ComboModelMidiFile;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class XTMixerLineHeader extends javax.swing.JPanel {

    /**
     * Creates new form XTSwitchLine
     */
    public XTMixerLineHeader(XTMixerView parent) {
        initComponents();
        _parent = parent;
        _file = new ComboModelMidiFile();
        jComboBoxMidiFile.setModel(_file);
    }

    XTMixerView _parent;
    ComboModelMidiFile _file;
    File _fileOpened;
    SMFSequencer _seq;
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jToggleButton1 = new javax.swing.JToggleButton();
        jComboBoxMidiFile = new javax.swing.JComboBox<>();
        jButtonPlay = new javax.swing.JButton();
        jButtonPause = new javax.swing.JButton();
        jButtonStop = new javax.swing.JButton();
        jLabelInfo = new javax.swing.JLabel();

        setLayout(new java.awt.GridBagLayout());

        jToggleButton1.setText("Engine");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridheight = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        add(jToggleButton1, gridBagConstraints);

        jComboBoxMidiFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBoxMidiFileActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        add(jComboBoxMidiFile, gridBagConstraints);

        jButtonPlay.setText("Play");
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.weightx = 1.0;
        add(jButtonPlay, gridBagConstraints);

        jButtonPause.setText("Pause");
        jButtonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPauseActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 3;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButtonPause, gridBagConstraints);

        jButtonStop.setText("Stop");
        jButtonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStopActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 4;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jButtonStop, gridBagConstraints);

        jLabelInfo.setText("jLabel1");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.gridwidth = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        add(jLabelInfo, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jComboBoxMidiFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBoxMidiFileActionPerformed
        // TODO add your handling code here:
        if (_seq != null) {
            _seq.stopPlayerAwait();
            _nextStart = 0;            
        }
        int index  = jComboBoxMidiFile.getSelectedIndex();
        if (index >= 0) {
            ComboModelMidiFile.Entry e = _file.getElementAt(index);
            File f = e.getFile();
            if (f == null) {
                startBrowse();
                return;
            }
            openFile(f);
        }
    }//GEN-LAST:event_jComboBoxMidiFileActionPerformed

    long _nextStart = 0;
    
    private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
        // TODO add your handling code here:
        if (_seq != null) {
            _seq.startPlayerThread(_nextStart, createSMFCallback());
        }
    }//GEN-LAST:event_jButtonPlayActionPerformed

    public SMFCallback createSMFCallback() {
        return new SMFCallback() {
            @Override
            public void smfPlayNote(OneMessage e) {
                _parent.dispatchNote(e);
            }

            @Override
            public void smfStarted() {
                _parent.cleanNote();
                clearProgress();
            }

            @Override
            public void smfStoped(boolean fineFinish) {
                clearProgress();
            }

            @Override
            public void smfProgress(long pos, long finish) {
                progress(pos, finish);
            }
        };
    }

    private void jButtonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPauseActionPerformed
        if (_seq != null) {
            _seq.stopPlayerAwait();
            _nextStart = _seq.getCurrentMilliSeconds();            
        }
    }//GEN-LAST:event_jButtonPauseActionPerformed

    private void jButtonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStopActionPerformed
        if (_seq != null) {
            _seq.stopPlayerAwait();
            _nextStart = 0;            
        }
    }//GEN-LAST:event_jButtonStopActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonPause;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonStop;
    private javax.swing.JComboBox<ComboModelMidiFile.Entry> jComboBoxMidiFile;
    private javax.swing.JLabel jLabelInfo;
    private javax.swing.JToggleButton jToggleButton1;
    // End of variables declaration//GEN-END:variables

    public void startBrowse() {
        FileFilter filtermid = new FileFilterListExt(new String[]{".mid"});
        MXFolderBrowser c3 = new MXFolderBrowser(new File("C:/midi"), filtermid);
        MXUtil.showAsDialog(null, c3, "MID File");
        FileList list = c3.getReturnValue();
        if (list == null || list.size() == 0) {
            return;
        }
        File ret = null;
        for (File seek : list) {
            if (ret == null) {
                ret = seek;
            }
            _file.addFile(seek);
        }
        if (ret != null) {
            openFile(ret);
        }
    }
    
    public void openFile(File file) {
        try {
            if (_fileOpened == file) {
                return;
            }
            if (_fileOpened != null && _fileOpened.getPath().equalsIgnoreCase(file.getPath())) {
                return;
            }
            _fileOpened = null;
            _seq = null;
            _seq = new SMFSequencer(file);
            _fileOpened = file;
            long milliSeconds = _seq._parser._listMessage.getLast()._millisecond;
            jLabelInfo.setText("Time: ? ~ " + getTimestamp(milliSeconds));
            int x = _file.findFile(_fileOpened);
            jComboBoxMidiFile.setSelectedIndex(x);
        }catch(IOException ex) {
            jLabelInfo.setText("Error: " + ex.getMessage());
            MXFileLogger.getLogger(XTMixerLineHeader.class).log(Level.SEVERE, ex.getMessage(), ex);
        }
    }
 
    public static String getTimestamp(long milliSeconds) {
        int minute = (int)(milliSeconds / 1000 / 60);
        int seconds = (int)((milliSeconds / 1000) % 60);
        int millisec = (int)(milliSeconds % 1000);
        String text_ms = "00" + millisec;
        while (text_ms.length() >= 4) {
            text_ms = text_ms.substring(1);
        }
        return minute +":" + seconds + "." + text_ms;
    }

    long _lastPos = -1000;

    public void clearProgress() {
        _lastPos = -1000;
    }
    
    public void progress(long pos, long finish) {
        long lastSec = _lastPos / 1000;
        long posSec = pos /1000;
        if (lastSec == posSec) {
            return;
        }
        String posTimestamp = getTimestamp(pos);
        String endTimestamp = getTimestamp(finish);
        jLabelInfo.setText("Time: " + posTimestamp + " ~ " + endTimestamp);
    }
}
