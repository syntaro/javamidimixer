/*
 * Copyright (C) 2023 Syntarou YOSHIDA.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package jp.synthtarou.midimixer.libs.swing;

import java.awt.Component;
import java.awt.Container;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTabbedPane;
import javax.swing.SwingUtilities;
import jp.synthtarou.cceditor.view.common.MXFolderBrowser;
import jp.synthtarou.midimixer.libs.common.MXUtil;
import jp.synthtarou.midimixer.libs.swing.attachment.MXAttachSliderLikeEclipse;

/**
 *
 * @author Syntarou YOSHIDA
 */
public class MXSwingAccordion extends javax.swing.JPanel {

    public static void main(String args[]) {
        JPanel form = new JPanel();
        form.setLayout(new BoxLayout(form, BoxLayout.Y_AXIS));

        JTabbedPane tabowner = new JTabbedPane();
        form.add(tabowner);

        for (int i = 0; i < 1; ++i) {
            JScrollPane scroll = new JScrollPane();
            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);

            JPanel contents = new JPanel();
            contents.setLayout(new GridBagLayout());

            for (int y = 0; y < 3; ++y) {
                GridBagConstraints lay1 = new GridBagConstraints(0, y, 1, 1, 1, 0, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0);
                MXSwingAccordion acc1 = new MXSwingAccordion();
                acc1.setTitle("Section " + (y+1));
                //acc1.setContents(new MXFolderBrowser(null, null));
                MXSwingAccordionSample a = new MXSwingAccordionSample();
                MXSwingAccordionSample b = new MXSwingAccordionSample();
                MXSwingAccordionSample c = new MXSwingAccordionSample();
                JPanel panel = new JPanel();
                panel.setLayout(new BoxLayout(panel, BoxLayout.Y_AXIS));
                panel.add(a);
                panel.add(b);
                panel.add(c);
                acc1.setContents(panel);
                contents.add(acc1, lay1);
            }

            GridBagConstraints last = new GridBagConstraints(0, 10, 1, 1, 1, 1, GridBagConstraints.CENTER, GridBagConstraints.BOTH, new Insets(0, 0, 0, 0), 0, 0);
            contents.add(new JLabel(""), last);

            scroll.setViewportView(contents);

            tabowner.add("Page " + i, scroll);
        }

        MXUtil.showAsDialog(null, form, "Accordion Test");
    }

    /**
     * Creates new form MXAAccordionPanel2
     */
    public MXSwingAccordion() {
        initComponents();
        int height = jSlider1.getHeight();
        jSlider1.setMinimumSize(new Dimension(50, 20));
        jSlider1.setMaximumSize(new Dimension(50, 20));
        jSlider1.setPreferredSize(new Dimension(50, 20));
        new MXAttachSliderLikeEclipse(jSlider1).showAsSwitch(true);
        jSlider1.setMinimum(0);
        jSlider1.setMaximum(1);

        jPanelContents = new MXSwingAccordionElement();
        jPanelContents.setLayout(new BoxLayout(jPanelContents, BoxLayout.LINE_AXIS));
        jScrollPane1.setViewportView(jPanelContents);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanelContents = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSlider1 = new javax.swing.JSlider();

        setLayout(new java.awt.GridBagLayout());

        jPanelContents.setLayout(new javax.swing.BoxLayout(jPanelContents, javax.swing.BoxLayout.LINE_AXIS));
        jScrollPane1.setViewportView(jPanelContents);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.gridwidth = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        add(jScrollPane1, gridBagConstraints);

        jLabel1.setFont(new java.awt.Font("メイリオ", 0, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 51, 0));
        jLabel1.setText("Title");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        add(jLabel1, gridBagConstraints);

        jSlider1.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSlider1StateChanged(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        add(jSlider1, gridBagConstraints);
    }// </editor-fold>//GEN-END:initComponents

    private void jSlider1StateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSlider1StateChanged
        Integer v = jSlider1.getValue();
        boolean sel = v.intValue() != 0;
        if (_accordionSelected != sel) {
            setAccordionSelected(sel);
        }
    }//GEN-LAST:event_jSlider1StateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanelContents;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSlider jSlider1;
    // End of variables declaration//GEN-END:variables

    boolean _accordionSelected = true;
    JPanel _contents = null;
    boolean _animated = false;

    public void setAccordionSelected(boolean show) {
        if (SwingUtilities.isEventDispatchThread() == false) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    setAccordionSelected(show);
                }
            });
            return;
        }

        if (_accordionSelected == show) {
            return;
        }
        if (_animated) {
            return;
        }

        _animated = true;
        _accordionSelected = show;

        Integer v = jSlider1.getValue();
        boolean sel = v.intValue() != 0;
        if (sel != show) {
            jSlider1.setValue(show ? 1 : 0);
        }
        if (show) {
            try {
                jPanelContents.removeAll();
                jPanelContents.add(_contents);
                jPanelContents.setBackground(null);
                jPanelContents.setMinimumSize(new Dimension(_contents.getWidth(), jSlider1.getHeight() + _contents.getHeight()));
                jPanelContents.setMaximumSize(new Dimension(_contents.getWidth(), jSlider1.getHeight() + _contents.getHeight()));
                revalidateASAP();
            }catch(Throwable e) {
                e.printStackTrace();
                _animated = false;
                return;
            }
            new Thread(new Runnable() {
                @Override
                public void run() {
                    MXSwingAccordionElement panel = (MXSwingAccordionElement) jPanelContents;
                    for (int p = 0; p < 100; p += 10) {
                        panel.setScrollPercent(p);
                        try {
                            Thread.sleep(25);
                        } catch (Exception e) {

                        }
                    }
                    panel.setScrollPercent(100);
                    _animated = false;
                }
            }).start();
        } else {
            new Thread(new Runnable() {
                @Override
                public void run() {
                    for (int p = 100; p >= 0; p -= 10) {
                        MXSwingAccordionElement panel = (MXSwingAccordionElement) jPanelContents;
                        panel.setScrollPercent(p);
                        try {
                            if (p != 0) {
                                Thread.sleep(25);
                            }
                        } catch (Exception e) {

                        }
                    }
                    SwingUtilities.invokeLater(new Runnable() {
                        public void run() {
                            jPanelContents.removeAll();
                            revalidateASAP();
                        }
                    });
                    _animated = false;
                }
            }).start();
        }

    }

    public boolean isAccordionSelected() {
        return _accordionSelected;
    }

    public void setContents(JPanel panel) {
        _contents = panel;
        jPanelContents.setLayout(new BoxLayout(jPanelContents, BoxLayout.PAGE_AXIS));
        jPanelContents.removeAll();
        if (_accordionSelected) {
            jPanelContents.add(_contents);
        }
    }
    
    public void setTitle(String title) {
        jLabel1.setText(title);
    }

    public void revalidateASAP() {
        if (SwingUtilities.isEventDispatchThread() == false) {
            SwingUtilities.invokeLater(new Runnable() {
                @Override
                public void run() {
                    revalidateASAP();
                }
            });
        }
        invalidate();
        Component c = this;
        while (true) {
            Container p = c.getParent();
            if (p == null) {
                break;
            }
            c = p;
            if (p.isValidateRoot()) {
                break;
            }
        }
        c.validate();
    }
}
